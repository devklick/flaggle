datasource db {
  url      = env("DATABASE_URL")
  provider = "postgresql"
}

generator client {
  provider = "prisma-client-js"
}

enum GameStatus {
  InProgress @map("in_progress")
  Lost       @map("lost")
  Won        @map("won")
}

model Country {
  Id           Int      @id @default(autoincrement()) @map("id")
  ExternalRef  String   @unique() @default(uuid()) @map("external_ref") @db.Uuid()
  CreatedOn    DateTime @default(now()) @map("created_on")
  UpdatedOn    DateTime @updatedAt @map("updated_on")
  CommonName   String   @unique() @map("common_name") @db.VarChar(60)
  OfficialName String   @map("offcial_name") @db.VarChar(120)
  FlagId       Int      @unique @map("flag_id")

  Flag    Flag     @relation(fields: [FlagId], references: [Id])
  Games   Game[]
  Answers Answer[]

  @@map("country")
}

model Flag {
  Id                  Int      @id @default(autoincrement()) @map("id")
  ExternalRef         String   @unique() @default(uuid()) @map("external_ref") @db.Uuid()
  CreatedOn           DateTime @default(now()) @map("created_on")
  UpdatedOn           DateTime @updatedAt @map("updated_on")
  ExternalDownloadUrl String   @map("external_download_url") @db.VarChar(256)
  FileType            FileType @map("file_type")
  CountryId           Int?     @unique @map("country_id")

  Country Country?
  Chunks  FlagChunk[]

  @@map("flag")
}

model FlagChunk {
  Id             Int             @id @default(autoincrement()) @map("id")
  ExternalRef    String          @unique() @default(uuid()) @map("external_ref") @db.Uuid()
  CreatedOn      DateTime        @default(now()) @map("created_on")
  UpdatedOn      DateTime        @updatedAt @map("updated_on")
  X              Int             @map("x") @db.Integer()
  Y              Int             @map("y") @db.Integer()
  FileType       FileType        @map("file_type")
  FlagId         Int             @map("flag_id")
  Flag           Flag            @relation(fields: [FlagId], references: [Id])
  RevealedChunks RevealedChunk[]

  @@map("flag_chunk")
}

model Player {
  Id          Int      @id @default(autoincrement()) @map("id")
  ExternalRef String   @unique() @default(uuid()) @map("external_ref") @db.Uuid()
  CreatedOn   DateTime @default(now()) @map("created_on")
  UpdatedOn   DateTime @updatedAt @map("updated_on")
  Games       Game[]
  Answers     Answer[]

  @@map("player")
}

model Game {
  Id             Int             @id @default(autoincrement()) @map("id")
  ExternalRef    String          @unique() @default(uuid()) @map("external_ref") @db.Uuid()
  CreatedOn      DateTime        @default(now()) @map("created_on")
  UpdatedOn      DateTime        @updatedAt @map("updated_on")
  CountryId      Int             @map("country_id")
  PlayerId       Int             @map("player_id")
  Status         GameStatus      @map("status")
  Player         Player          @relation(fields: [PlayerId], references: [Id])
  Country        Country         @relation(fields: [CountryId], references: [Id])
  RevealedChunks RevealedChunk[]
  Answers        Answer[]

  @@map("game")
}

model RevealedChunk {
  Id          Int      @id @default(autoincrement()) @map("id")
  ExternalRef String   @unique() @default(uuid()) @map("external_ref") @db.Uuid()
  OrderId     Int
  CreatedOn   DateTime @default(now()) @map("created_on")
  UpdatedOn   DateTime @updatedAt @map("updated_on")
  GameId      Int      @map("game_id")
  FlagChunkId Int      @map("flag_chunk_id")

  Game      Game      @relation(fields: [GameId], references: [Id])
  FlagChunk FlagChunk @relation(fields: [FlagChunkId], references: [Id])
  Answers   Answer[]

  @@map("revealed_chunk")
}

model Answer {
  Id              Int           @id @default(autoincrement()) @map("id")
  ExternalRef     String        @unique() @default(uuid()) @map("external_ref") @db.Uuid()
  OrderId         Int
  CreatedOn       DateTime      @default(now()) @map("created_on")
  UpdatedOn       DateTime      @updatedAt @map("updated_on")
  GameId          Int           @map("game_id")
  PlayerId        Int           @map("player_id")
  CountryId       Int           @map("country_id")
  Correct         Boolean       @map("correct")
  RevealedChunkId Int           @map("revealed_chunk_id")
  Game            Game          @relation(fields: [GameId], references: [Id])
  Player          Player        @relation(fields: [PlayerId], references: [Id])
  Country         Country       @relation(fields: [CountryId], references: [Id])
  RevealedChunk   RevealedChunk @relation(fields: [RevealedChunkId], references: [Id])

  @@map("answer")
}

enum FileType {
  PNG @map("png")

  @@map("file_type")
}
